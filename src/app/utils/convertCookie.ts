/**
 * 工具函数：将现有cookie文件转换为Netscape格式
 */
import fs from 'fs';
import path from 'path';

/**
 * 将现有cookie文件转换为Netscape格式并保存为cookie.txt
 * @param cookieFilePath 现有cookie文件路径
 * @returns 转换后的cookie.txt文件路径
 */
export async function convertCookieToNetscape(cookieFilePath: string = 'public/cookie'): Promise<string> {
  try {
    // 读取现有cookie文件
    const cookieContent = await fs.promises.readFile(cookieFilePath, 'utf-8');
    
    // 创建Netscape格式头部
    let netscapeCookieContent = '# Netscape HTTP Cookie File\n';
    netscapeCookieContent += '# https://curl.haxx.se/docs/http-cookies.html\n';
    netscapeCookieContent += '# This file was generated by youtube-to-mp3\n\n';
    
    // 处理cookie内容
    if (cookieContent && cookieContent.trim()) {
      // 尝试解析不同格式的cookie
      // 1. 尝试解析为JSON格式
      try {
        const cookieJson = JSON.parse(cookieContent);
        // 处理JSON格式的cookie
        if (Array.isArray(cookieJson)) {
          // 如果是数组格式
          for (const cookie of cookieJson) {
            if (cookie.name && cookie.value) {
              const domain = cookie.domain || '.youtube.com';
              const path = cookie.path || '/';
              const secure = cookie.secure ? 'TRUE' : 'FALSE';
              const expiry = cookie.expirationDate || 2147483647;
              
              netscapeCookieContent += `${domain.startsWith('.') ? domain : '.' + domain}\tTRUE\t${path}\t${secure}\t${expiry}\t${cookie.name}\t${cookie.value}\n`;
            }
          }
        } else {
          // 如果是对象格式，遍历所有属性
          for (const [name, value] of Object.entries(cookieJson)) {
            netscapeCookieContent += `.youtube.com\tTRUE\t/\tFALSE\t2147483647\t${name}\t${value}\n`;
          }
        }
      } catch (e) {
        // 2. 如果不是JSON格式，尝试解析为字符串格式（如name=value; name2=value2）
        const cookies = cookieContent.split(';').filter(cookie => cookie.trim());
        
        for (const cookie of cookies) {
          const [name, value] = cookie.trim().split('=').map(part => part.trim());
          if (name && value) {
            netscapeCookieContent += `.youtube.com\tTRUE\t/\tFALSE\t2147483647\t${name}\t${value}\n`;
          }
        }
      }
    }
    
    // 确定输出路径（与原cookie文件在同一目录）
    const cookieDir = path.dirname(cookieFilePath);
    const cookieTxtPath = path.join(cookieDir, 'cookie.txt');
    
    // 将Netscape格式的cookie写入文件
    await fs.promises.writeFile(cookieTxtPath, netscapeCookieContent, 'utf-8');
    
    return cookieTxtPath;
  } catch (error) {
    console.error('Error converting cookie to Netscape format:', error);
    throw new Error('Failed to convert cookie to Netscape format');
  }
}

/**
 * 替换现有cookie文件为Netscape格式的cookie.txt
 */
export async function replaceCookieWithNetscape(): Promise<void> {
  try {
    const originalCookiePath = 'public/cookie';
    const cookieTxtPath = await convertCookieToNetscape(originalCookiePath);
    
    // 备份原始cookie文件
    const backupPath = originalCookiePath + '.backup';
    await fs.promises.copyFile(originalCookiePath, backupPath);
    
    // 用新生成的cookie.txt替换原始cookie文件
    await fs.promises.copyFile(cookieTxtPath, originalCookiePath);
    
    console.log(`Cookie file successfully converted to Netscape format and replaced.`);
    console.log(`Original cookie file backed up to ${backupPath}`);
  } catch (error) {
    console.error('Error replacing cookie file:', error);
    throw new Error('Failed to replace cookie file');
  }
}